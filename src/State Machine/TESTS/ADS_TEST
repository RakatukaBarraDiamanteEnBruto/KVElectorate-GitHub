"""""
CHANNEL 0 - 0X67
CHANNEL 1 - 0X66
CHANNEL 2 - 0X67
CHANNEL 4 - 0X48 

"""
import time
from datetime import timedelta
import board
import busio
import adafruit_tca9548a
from adafruit_mcp9600 import MCP9600
import adafruit_ads1x15.ads1115 as ADS
from adafruit_ads1x15.analog_in import AnalogIn

class MultiplexedThermocoupleLogger:
    def __init__(self, mux_address=0x70):
            """Initialize the data logger with multiplexer support"""
            # Hardware Configuration
            self.I2C_SDA_PIN = board.SDA
            self.I2C_SCL_PIN = board.SCL
            self.MUX_ADDRESS = mux_address
            
            # Sensor configurations - now storing mux channel with each sensor
            self.thermocouple_config = []  # List of (mux_channel, sensor_address)
            self.flow_sensor_config = []   # List of (mux_channel, ads_address, ads_channel)
            
            # Data Storage
            self.rec_temp = []
            self.rec_flow = []
            self.rec_time = []
            
            # System State
            self.recording = False
            self.thermocouples = []  # List of (mux_channel, sensor) tuples
            self.flow_sensors = []   # List of (mux_channel, ads, ads_channel) tuples
            self.i2c = None
            self.mux = None
            self.test_start_time = None

    def add_thermocouple(self, mux_channel, thermo_address):
        """Add a thermocouple through the specified multiplexer channel"""
        if mux_channel < 0 or mux_channel > 7:
            raise ValueError("Multiplexer channel must be between 0 and 7")
        self.thermocouple_config.append((mux_channel, thermo_address))
        
    def add_flow_sensor(self, mux_channel, ads_address, ads_channel):
        """Add a flow sensor through the specified multiplexer channel"""
        if mux_channel < 0 or mux_channel > 7:
            raise ValueError("Multiplexer channel must be between 0 and 7")
        if ads_channel < 0 or ads_channel > 3:
            raise ValueError("ADS channel must be between 0 and 3")
        self.flow_sensor_config.append((mux_channel, ads_address, ads_channel))

    def _format_timestamp(self, seconds):
        """Format seconds as HH:MM:SS.mmm
        
        Args:
            seconds: Time in seconds
        Returns:
            str: Formatted timestamp string
        """
        return str(timedelta(seconds=seconds))[:-3]  # Truncate microseconds
        
    def _convert_voltage_to_flow(self, voltage):
        """Convert voltage reading from flow sensor to flow rate in l/s
    
    Args:
        voltage: Voltage reading from ADS1115
    Returns:
        float: Flow rate in liters per second
    """
    # You'll need to replace this with your actual conversion formula
    # This is just an example linear conversion - adjust for your sensor!
        if voltage is None:
            return None
        
        # Example conversion: 1V = 2.5 l/s with 0V = 0 l/s
        flow_rate = voltage * 2.5
        
        # Add any sensor-specific calibration here
        return flow_rate

    def initialize_hardware_static(self):
        """Initialize both thermocouples and flow sensors through multiplexer"""
        try:
            # Initialize I2C bus
            self.i2c = busio.I2C(self.I2C_SCL_PIN, self.I2C_SDA_PIN)
            
            # Initialize multiplexer
            self.mux = adafruit_tca9548a.TCA9548A(self.i2c, address=self.MUX_ADDRESS)
            print(f"Multiplexer initialized at 0x{self.MUX_ADDRESS:02X}")
            
            # Initialize data storage
            self.rec_temp = [[] for _ in range(len(self.thermocouple_config))]
            self.rec_flow = [[] for _ in range(len(self.flow_sensor_config))]
            self.rec_time = [[] for _ in range(max(len(self.thermocouple_config), len(self.flow_sensor_config)))]
            
            # Initialize thermocouples through their mux channels
            self.thermocouples = []
            for idx, (mux_ch, addr) in enumerate(self.thermocouple_config):
                try:
                    # Get the mux channel first
                    channel = self.mux[mux_ch]
                    # Then initialize sensor through that channel
                    tc = MCP9600(channel, address=addr)
                    self.thermocouples.append((mux_ch, tc))
                    print(f"Thermocouple {idx}: Mux CH{mux_ch}, Addr 0x{addr:02X} - OK")
                except Exception as e:
                    self.thermocouples.append((mux_ch, None))
                    print(f"Thermocouple {idx}: Mux CH{mux_ch}, Addr 0x{addr:02X} - Failed: {e}")
            
            # Initialize flow sensors through their mux channels
            self.flow_sensors = []
            for idx, (mux_ch, addr, ads_ch) in enumerate(self.flow_sensor_config):
                try:
                    # Get the mux channel first
                    channel = self.mux[mux_ch]
                    # Then initialize ADS through that channel
                    ads = ADS.ADS1115(channel, address=addr)
                    self.flow_sensors.append((mux_ch, ads, ads_ch))
                    print(f"Flow Sensor {idx}: Mux CH{mux_ch}, ADS 0x{addr:02X}, CH{ads_ch} - OK")
                except Exception as e:
                    self.flow_sensors.append((mux_ch, None, ads_ch))
                    print(f"Flow Sensor {idx}: Mux CH{mux_ch}, ADS 0x{addr:02X}, CH{ads_ch} - Failed: {e}")
            
            return True
            
        except Exception as e:
            print(f"Initialization failed: {e}")
            return False

    def collect_data_static(self, duration_sec=0, max_samples=0):
        """Collect data through multiplexer channels"""
        if not any(tc[1] for tc in self.thermocouples) and not any(fs[1] for fs in self.flow_sensors):
            print("No sensors initialized!")
            return
            
        self.recording = True
        self.test_start_time = time.monotonic()
        sample_count = 0
        
        try:
            while self.recording:
                current_time = time.monotonic()
                elapsed = current_time - self.test_start_time
                
                # Check termination conditions
                if (duration_sec > 0 and elapsed >= duration_sec) or (max_samples > 0 and sample_count >= max_samples):
                    break
                
                # Read thermocouples through their mux channels
                temp_readings = []
                for idx, (mux_ch, tc) in enumerate(self.thermocouples):
                    if tc is not None:
                        try:
                            # The multiplexer channel is already set in the sensor object
                            temp = tc.temperature
                            self.rec_temp[idx].append(temp)
                        except Exception as e:
                            temp = None
                            self.rec_temp[idx].append(None)
                            print(f"[{self._format_timestamp(elapsed)}] Thermocouple CH{mux_ch} error: {e}")
                    else:
                        temp = None
                        self.rec_temp[idx].append(None)
                    temp_readings.append((mux_ch, temp))
                
                # Read flow sensors through their mux channels
                flow_readings = []
                for idx, (mux_ch, ads, ads_ch) in enumerate(self.flow_sensors):
                    if ads is not None:
                        try:
                            # The multiplexer channel is already set in the ADS object
                            chan = AnalogIn(ads, getattr(ADS, f'P{ads_ch}'))
                            voltage = chan.voltage
                            flow = self._convert_voltage_to_flow(voltage)
                            self.rec_flow[idx].append(flow)
                        except Exception as e:
                            flow = None
                            self.rec_flow[idx].append(None)
                            print(f"[{self._format_timestamp(elapsed)}] Flow CH{mux_ch} error: {e}")
                    else:
                        flow = None
                        self.rec_flow[idx].append(None)
                    flow_readings.append((mux_ch, flow))
                
                # Store timestamp
                for i in range(len(self.rec_time)):
                    if i < len(self.rec_time):
                        self.rec_time[i].append(elapsed)
                
                # Print readings
                print(f"[{self._format_timestamp(elapsed)}] ", end='')
                for ch, temp in temp_readings:
                    print(f"T{ch}={temp}Â°C " if temp is not None else f"T{ch}=X ", end='')
                for ch, flow in flow_readings:
                    print(f"F{ch}={flow}L/s " if flow is not None else f"F{ch}=X ", end='')
                print()
                
                sample_count += 1
                time.sleep(0.5)
                
        except KeyboardInterrupt:
            print("\nCollection interrupted by user")
        finally:
            self.recording = False
            elapsed = time.monotonic() - self.test_start_time
            print(f"Collection complete. Duration: {elapsed:.1f}s, Samples: {sample_count}")
    def get_data(self):
        """Return recorded data as (temperatures, flows, timestamps) tuple"""
        return (self.rec_temp, self.rec_flow, self.rec_time)

    def clear_data(self):
        """Clear all stored data and reset test timer"""
        num_temp_sensors = len(self.THERMOCOUPLE_CONFIG)
        num_flow_sensors = len(self.FLOW_SENSOR_CONFIG)
        self.rec_temp = [[] for _ in range(num_temp_sensors)]
        self.rec_flow = [[] for _ in range(num_flow_sensors)]
        self.rec_time = [[] for _ in range(max(num_temp_sensors, num_flow_sensors))]
        self.test_start_time = None

logger = MultiplexedThermocoupleLogger(mux_address=0x70)
 # Channel 2
logger.add_flow_sensor(4, 0x48, 0)  # Channel 4
logger.add_thermocouple(0, 0x66)  # Channel 0
logger.add_thermocouple(1, 0x66)  # Channel
logger.add_thermocouple(2, 0x67)  # Channel 2
logger.initialize_hardware_static()
logger.collect_data_static(duration_sec=10, max_samples=20)