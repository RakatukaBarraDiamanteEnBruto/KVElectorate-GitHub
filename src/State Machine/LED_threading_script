# this will serve as the threaded script for the state machine
try:
    import RPi.GPIO as GPIO
except ModuleNotFoundError:
    from unittest import mock
    GPIO = mock.MagicMock()
import time
try:
    import gpiozero
except ModuleNotFoundError:
    from unittest import mock
    gpiozero = mock.MagicMock()
from time import sleep
try:
    from gpiozero import Button
except (ModuleNotFoundError, ImportError):
    from unittest.mock import MagicMock
    Button = MagicMock()
try:
    from gpiozero import LED
except (ModuleNotFoundError, ImportError):
    from unittest.mock import MagicMock
    LED = MagicMock()
import threading
# This script is used to control the LEDs in a calibration bench state machine.

LED1 = LED(24) # PRECHECK Led
LED2 = LED(25) # RUNNING STATIC Led
LED3 = LED(8)  # RUNNING DINAMIC Led
LED4 = LED(7)  # ERRROR Led
runmode = False # This variable will be used to decide if the next LED is blue or white for the static or dynamic running mode
                    

class State:
    """
    Enumeration of possible states for the calibration bench.
    """
    IDLE = "IDLE"
    PRECHECK_DINAMIC = "PRECHECK"
    PRECHECK_STATIC = "PRECHECK_STATIC"
    RUNNING = "RUNNING"
    COMPLETED = "COMPLETED"
    ERROR = "ERROR"


state = State.IDLE

def ledscpt(): 
    if state  == State.IDLE:    # IDLE State LED Script, It just makes all LED ON
            LED1.on() #PRECHECK LED
            LED2.on()
            LED3.on()
            LED4.on()
        while State.IDLE == True:

            print("LEDs are ON in IDLE state")  
            
            


    if state  == State.PRECHECK_DINAMIC or state == State.PRECHECK_STATIC: # PRECHECK State LED Script, It just makes LED2 blink
        if state == State.PRECHECK_STATIC:
            runmode = True  # Set runmode to True for STATIC mode  
        else: 
            runmode = False     


        while state  == State.PRECHECK_DINAMIC or state == State.PRECHECK_STATIC: # It will blink LED2 it will also set a variable that will decide what LED 
                                                                                  # set if the next LED is blue or white for the static or dynamic running mode
            LED1.on()
            time.sleep(0.1)
            LED1.off()
            print("LEDs are ON in PRECHECK state")  
            
    if state  == State.RUNNING and runmode == True: # RUNNING State LED Script, It just makes LED2 Blink during static test
        while state == State.RUNNING:

            LED2.on()
            time.sleep(0.1)
            LED2.off()
    if state  == State.RUNNING and runmode == False: # RUNNING State LED Script, It just makes LED3 Blink during dynamic test 
        while state == State.RUNNING:

            LED2.on()
            time.sleep(0.1)
            LED2.off()           

    if state  == State.COMPLETED: # COMPLETED State LED Script, It just makes LED1 ON
        while State.COMPLETED == True:
            if state  == State.COMPLETED and runmode == True: # COMPLETED State LED Script, It just makes LED2 on during static test
                while state == State.COMPLETED:

                    LED2.on()

            if state  == State.COMPLETED and runmode == False: # COMPLETED State LED Script, It just makes LED3 on after dynamic test 
                while state == State.COMPLETED:

                    LED2.on()
    if state == State.ERROR: # ERROR State LED Script, It just makes LED4 blink
        while state == State.ERROR:
            LED4.on()
            time.sleep(0.1)
            LED4.off()
            print("LEDs are ON in ERROR state")

ledthr =threading.Thread(target=ledscpt)

ledthr.start()

time.sleep(2)

