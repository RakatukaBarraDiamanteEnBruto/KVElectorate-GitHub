import board
import busio
import time
from adafruit_mcp9600 import MCP9600
import adafruit_tca9548a

class MultiplexedThermocoupleLogger:
    def __init__(self, mux_address=0x70):
        """Initialize the data logger with exclusive multiplexer support
        
        Args:
            mux_address: I2C address of the multiplexer (default 0x70)
        """
        # Hardware Configuration
        self.I2C_SDA_PIN = board.SDA  # Default I2C1 SDA
        self.I2C_SCL_PIN = board.SCL  # Default I2C1 SCL
        self.MUX_ADDRESS = mux_address  # I2C address of the multiplexer
        
        # Thermocouple configuration - list of tuples (channel, thermocouple_address)
        self.THERMOCOUPLE_CONFIG = []
        
        # Data Storage
        self.rec_temp = []  # Temperature readings
        self.rec_time = []  # Timestamps
        
        # System State
        self.recording = False
        self.thermocouples = []  # List of (channel, sensor) tuples
        self.i2c = None
        self.mux = None  # The multiplexer instance

    def add_thermocouple(self, channel, thermo_address):
        """
        Add a thermocouple configuration through the multiplexer
        
        Args:
            channel: Multiplexer channel number (0-7)
            thermo_address: Address of the MCP9600 on that channel
        """
        if channel < 0 or channel > 7:
            raise ValueError("Channel must be between 0 and 7")
        self.THERMOCOUPLE_CONFIG.append((channel, thermo_address))
        
    def initialize_hardware(self):
        """
        Initialize I2C communication, multiplexer, and thermocouple sensors
        Returns: True if at least one sensor initialized successfully
        """
        try:
            # Initialize I2C bus
            self.i2c = busio.I2C(scl=self.I2C_SCL_PIN, sda=self.I2C_SDA_PIN, frequency=100000)
            
            # Initialize data storage based on config
            num_sensors = len(self.THERMOCOUPLE_CONFIG)
            self.rec_temp = [[] for _ in range(num_sensors)]
            self.rec_time = [[] for _ in range(num_sensors)]
            
            # Initialize multiplexer
            self.mux = adafruit_tca9548a.TCA9548A(self.i2c, address=self.MUX_ADDRESS)
            print(f"Initialized multiplexer at 0x{self.MUX_ADDRESS:02X}")
            
            # Initialize thermocouples
            self.thermocouples = []
            success_count = 0
            
            for channel, thermo_addr in self.THERMOCOUPLE_CONFIG:
                try:
                    # Get the channel from the multiplexer
                    mux_channel = self.mux[channel]
                    
                    # Initialize the thermocouple
                    tc = MCP9600(mux_channel, address=thermo_addr)
                    self.thermocouples.append((channel, tc))
                    success_count += 1
                    print(f"Initialized thermocouple at 0x{thermo_addr:02X} on channel {channel}")
                except (ValueError, OSError) as e:
                    self.thermocouples.append((channel, None))
                    print(f"Failed to initialize thermocouple at 0x{thermo_addr:02X} on channel {channel}: {e}")
            
            return success_count > 0
            
        except Exception as e:
            print(f"Hardware initialization failed: {e}")
            return False

    def collect_data(self, duration_sec=0, max_samples=0):
        """
        Collect data from all active thermocouples through the multiplexer
        Args:
            duration_sec: Recording duration in seconds (0=continuous)
            max_samples: Maximum samples to collect (0=unlimited)
        """
        if not self.thermocouples:
            print("No thermocouples initialized!")
            return
            
        self.recording = True
        start_time = time.monotonic()
        sample_count = 0
        
        print("Starting data collection...")
        
        try:
            while self.recording:
                # Check duration/sample limits
                current_time = time.monotonic()
                if (duration_sec > 0 and (current_time - start_time) >= duration_sec):
                    break
                if (max_samples > 0 and sample_count >= max_samples):
                    break
                
                # Take synchronized readings
                timestamp = time.monotonic()
                readings = []
                
                for i, (channel, tc) in enumerate(self.thermocouples):
                    if tc is not None:
                        try:
                            # Select the appropriate channel on the multiplexer
                            channel_obj = self.mux[channel]
                            temp = tc.temperature
                            self.rec_temp[i].append(temp)
                            self.rec_time[i].append(timestamp)
                        except OSError as e:
                            temp = None
                            self.rec_temp[i].append(None)
                            self.rec_time[i].append(timestamp)
                            print(f"Error reading thermocouple on channel {channel}: {e}")
                    else:
                        temp = None
                        self.rec_temp[i].append(None)
                        self.rec_time[i].append(timestamp)
                    readings.append((temp, timestamp))
                
                # Print readings every 0.5 seconds
                for idx, (temp, t) in enumerate(readings):
                    channel, _ = self.THERMOCOUPLE_CONFIG[idx]
                    print(f"CH{channel} = {temp} CÂº @ {t:.1f}s", end='  ')
                print() 

                sample_count += 1
                time.sleep(0.5)  # 2Hz sampling rate
                
        except KeyboardInterrupt:
            print("Data collection interrupted!")
        finally:
            self.recording = False
            print(f"Collection complete. Stored {sample_count} samples per sensor.")

    def get_data(self):
        """Return recorded data as (temperatures, timestamps) tuple"""
        return (self.rec_temp, self.rec_time)

    def clear_data(self):
        """Clear all stored data"""
        num_sensors = len(self.THERMOCOUPLE_CONFIG)
        self.rec_temp = [[] for _ in range(num_sensors)]
        self.rec_time = [[] for _ in range(num_sensors)]

logger = MultiplexedThermocoupleLogger()

# Add thermocouples through the multiplexer
logger.add_thermocouple(0, 0x67)  # Channel 0, thermocouple 0x67
logger.add_thermocouple(1, 0x66)  # Channel 1, thermocouple 0x65
logger.add_thermocouple(2, 0x67)  # Channel 2, thermocouple 0x60

print(f"Attempting to initialize channel {channel}...")
mux_channel = self.mux[channel]
print(f"Channel {channel} enabled, now initializing thermocouple...")

logger.initialize_hardware

if logger.initialize_hardware():
    print("Hardware initialized successfully.")
    logger.collect_data(duration_sec=10, max_samples=100)  # Collect for 10 seconds
else:
    print("Failed to initialize hardware. Check connections and addresses.")
        


