import time
import board
import busio
from adafruit_mcp9600 import MCP9600

class ThermocoupleLogger:
    def __init__(self):
        """Initialize the data logger with default settings"""
        # Hardware Configuration
        self.I2C_BUSES = {
            1: {'sda': board.SDA, 'scl': board.SCL},  # Default I2C1
            3: {'sda': board.GP4, 'scl': board.GP5}    # I2C3 pins (adjust as needed)
        }
        self.THERMOCOUPLE_ADDRS = [0x67, 0x60, 0x66]  # MCP9600 defaults
        
        # Data Storage
        self.rec_temp = [[] for _ in range(3)]  # Temperature readings
        self.rec_time = [[] for _ in range(3)]  # Timestamps
        
        # System State
        self.recording = False
        self.thermocouples = []
        self.i2c_buses = {}
        self.start_time = 0

    def initialize_hardware(self, bus_numbers=[1]):
        """
        Initialize I2C communication and thermocouple sensors
        Args:
            bus_numbers: List of I2C bus numbers to initialize (1 and/or 3)
        Returns: True if at least one sensor initialized successfully
        """
        try:
            # Initialize requested I2C buses
            for bus_num in bus_numbers:
                if bus_num in self.I2C_BUSES:
                    pins = self.I2C_BUSES[bus_num]
                    self.i2c_buses[bus_num] = busio.I2C(scl=pins['scl'], sda=pins['sda'], frequency=100000)
                    print(f"Initialized I2C bus {bus_num}")
                else:
                    print(f"Unsupported I2C bus: {bus_num}")
            
            # Initialize thermocouples on all buses
            self.thermocouples = []
            for addr in self.THERMOCOUPLE_ADDRS:
                tc_initialized = False
                for bus_num, i2c in self.i2c_buses.items():
                    try:
                        tc = MCP9600(i2c, address=addr)
                        self.thermocouples.append({'bus': bus_num, 'sensor': tc})
                        print(f"Initialized thermocouple at 0x{addr:02X} on I2C{bus_num}")
                        tc_initialized = True
                        break
                    except (ValueError, OSError):
                        continue
                
                if not tc_initialized:
                    self.thermocouples.append({'bus': None, 'sensor': None})
                    print(f"Failed to initialize thermocouple at 0x{addr:02X} on any bus")
            
            return any(tc['sensor'] is not None for tc in self.thermocouples)
            
        except Exception as e:
            print(f"Hardware initialization failed: {e}")
            return False

    def collect_data(self, duration_sec=0, max_samples=0):
        """
        Collect data from all active thermocouples
        Args:
            duration_sec: Recording duration in seconds (0=continuous)
            max_samples: Maximum samples to collect (0=unlimited)
        """
        if not any(tc['sensor'] is not None for tc in self.thermocouples):
            print("No thermocouples initialized!")
            return
            
        self.recording = True
        self.start_time = time.monotonic()
        sample_count = 0
        
        print("Starting data collection...")
        
        try:
            while self.recording:
                # Check duration/sample limits
                current_time = time.monotonic()
                elapsed_time = current_time - self.start_time
                if (duration_sec > 0 and elapsed_time >= duration_sec):
                    break
                if (max_samples > 0 and sample_count >= max_samples):
                    break
                
                # Take synchronized readings
                readings = []
                for i, tc in enumerate(self.thermocouples):
                    if tc['sensor']:
                        try:
                            temp = tc['sensor'].temperature
                            self.rec_temp[i].append(temp)
                            self.rec_time[i].append(elapsed_time)
                        except OSError:
                            temp = None
                            self.rec_temp[i].append(None)
                            self.rec_time[i].append(elapsed_time)
                    else:
                        temp = None
                        self.rec_temp[i].append(None)
                        self.rec_time[i].append(elapsed_time)
                    readings.append((temp, elapsed_time))
                
                # Print readings every 0.5 seconds
                for idx, (temp, t) in enumerate(readings):
                    print(f"TH{idx+1} = ({temp} Cº , {t:.2f} s)", end='  ')
                print() 

                sample_count += 1
                time.sleep(0.5)  # 2Hz sampling rate
                
        except KeyboardInterrupt:
            print("Data collection interrupted!")
        finally:
            self.recording = False
            print(f"Collection complete. Stored {sample_count} samples per sensor.")

    def get_data(self):
        """Return recorded data as (temperatures, timestamps) tuple with relative timestamps"""
        return (self.rec_temp, self.rec_time)

    def clear_data(self):
        """Clear all stored data"""
        self.rec_temp = [[] for _ in range(len(self.THERMOCOUPLE_ADDRS))]
        self.rec_time = [[] for _ in range(len(self.THERMOCOUPLE_ADDRS))]

# Example Usage
if __name__ == "__main__":
    logger = ThermocoupleLogger()
    
    # Initialize thermocouples on both I2C buses
    if logger.initialize_hardware(bus_numbers=[1, 3]):
        # Collect data for 10 seconds or max 100 samples
        logger.collect_data(duration_sec=10, max_samples=100)
        
        # Access data for analysis
        temperatures, timestamps = logger.get_data()
        print("\nFirst thermocouple data:")
        for temp, t in zip(temperatures[0], timestamps[0]):
            print(f"{temp} Cº, {t:.2f} s")
        
    else:
        print("Failed to initialize hardware!")