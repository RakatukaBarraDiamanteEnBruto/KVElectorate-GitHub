### IMPORTANT - READ THIS FIRST ###
# Replace read_sensor() with your actual sensor reading code.
# Adjust the Measurement class to include all data fields you want to log.
# Change directory in save_to_csv to your SD card mount point.
# This script creates a new CSV file for each test, named with the date and time.
import csv
from datetime import datetime
import os

class SDWriter:
    def __init__(self, base_path="/home/rpi_kve/Desktop"):
        # Create directory if it doesn't exist
        os.makedirs(base_path, exist_ok=True)
        self.base_path = base_path
    
    def _generate_filename(self, test_type):
        """Generate filename with test type identification"""
        return datetime.now().strftime(f"{test_type}_%Y%m%d_%H%M%S.csv")
    
    def _prepare_header(self, num_temp_sensors, num_flow_sensors=0):
        """Create header row based on sensor counts"""
        header = ["timestamp_sec"]
        header.extend([f"temp_sensor_{i+1}" for i in range(num_temp_sensors)])
        if num_flow_sensors > 0:
            header.extend([f"flow_sensor_{i+1}" for i in range(num_flow_sensors)])
        return header
    
    def _validate_data(self, timestamps, temperatures, flows=None):
        """Verify data structure matches expected format"""
        if not all(len(lst) == len(timestamps[0]) for lst in temperatures):
            raise ValueError("Temperature data length mismatch")
        if flows is not None and not all(len(lst) == len(timestamps[0]) for lst in flows):
            raise ValueError("Flow data length mismatch")
        return True
    
    def write_test_data(self, timestamps, temperatures, flows=None, test_type="test"):
        """
        Write collected test data to CSV
        
        Args:
            timestamps: List of lists (one per sensor) of timestamps
            temperatures: List of lists of temperature readings
            flows: Optional list of lists of flow readings
            test_type: Prefix for filename (e.g., 'static', 'dynamic')
        """
        try:
            self._validate_data(timestamps, temperatures, flows)
            
            filepath = f"{self.base_path}/{self._generate_filename(test_type)}"
            num_temp = len(temperatures)
            num_flow = len(flows) if flows else 0
            print(f"Writing data to {filepath} ")
            with open(filepath, 'w', newline='') as f:
                writer = csv.writer(f)
                
                # Write header
                writer.writerow(self._prepare_header(num_temp, num_flow))
                
                # Write data rows
                for i in range(len(timestamps[0])):
                    row = [f"{timestamps[0][i]:.3f}"]  # Use first sensor's timestamp
                    row.extend([f"{t[i]:.1f}" if t[i] is not None else "" 
                               for t in temperatures])
                    if flows:
                        row.extend([f"{f[i]:.2f}" if f[i] is not None else "" 
                                  for f in flows])
                    writer.writerow(row)
            
            print(f"Data saved to {filepath}")
            return True
            
        except Exception as e:
            print(f"CSV write failed: {str(e)}")
            return False
        

SDWriter = SDWriter()
# Example dummy data for one temperature sensor and no flow sensors
timestamps = [[0.0, 1.0, 2.0]]  # List of lists, one per sensor
temperatures = [[25.0, 26.0, 27.0]]  # List of lists, one per sensor
flows = None  # No flow sensors
SDWriter.write_test_data( timestamps, temperatures, flows, test_type="test")